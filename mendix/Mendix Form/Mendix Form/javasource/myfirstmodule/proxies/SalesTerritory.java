// This file was generated by Mendix Business Modeler 4.0.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package myfirstmodule.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.core.objectmanagement.member.MendixBinary;

/**
 * 
 */
public class SalesTerritory
{
	private final IMendixObject salesTerritoryMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "MyFirstModule.SalesTerritory";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		SalesTerritoryKey("SalesTerritoryKey"),
		SalesTerritoryRegion("SalesTerritoryRegion"),
		SalesTerritoryCountry("SalesTerritoryCountry"),
		SalesTerritoryGroup("SalesTerritoryGroup"),
		SalesTerritoryImage("SalesTerritoryImage");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public SalesTerritory(IContext context)
	{
		this(context, Core.instantiate(context, "MyFirstModule.SalesTerritory"));
	}

	protected SalesTerritory(IContext context, IMendixObject salesTerritoryMendixObject)
	{
		if (salesTerritoryMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("MyFirstModule.SalesTerritory", salesTerritoryMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a MyFirstModule.SalesTerritory");

		this.salesTerritoryMendixObject = salesTerritoryMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'new SalesTerritory(Context)' instead. Note that the constructor will not insert the new object in the database.
	 */
	@Deprecated
	public static myfirstmodule.proxies.SalesTerritory create(IContext context) throws CoreException
	{
		IMendixObject mendixObject = Core.create(context, "MyFirstModule.SalesTerritory");
		return new myfirstmodule.proxies.SalesTerritory(context, mendixObject);
	}

	/**
	 * @deprecated Use 'SalesTerritory.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static myfirstmodule.proxies.SalesTerritory initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return myfirstmodule.proxies.SalesTerritory.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static myfirstmodule.proxies.SalesTerritory initialize(IContext context, IMendixObject mendixObject)
	{
		return new myfirstmodule.proxies.SalesTerritory(context, mendixObject);
	}

	public static myfirstmodule.proxies.SalesTerritory load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return myfirstmodule.proxies.SalesTerritory.initialize(context, mendixObject);
	}

	public static java.util.List<myfirstmodule.proxies.SalesTerritory> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<myfirstmodule.proxies.SalesTerritory> result = new java.util.ArrayList<myfirstmodule.proxies.SalesTerritory>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//MyFirstModule.SalesTerritory" + xpathConstraint))
			result.add(myfirstmodule.proxies.SalesTerritory.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of SalesTerritoryKey
	 */
	public final Integer getSalesTerritoryKey()
	{
		return getSalesTerritoryKey(getContext());
	}

	/**
	 * @param context
	 * @return value of SalesTerritoryKey
	 */
	public final Integer getSalesTerritoryKey(IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.SalesTerritoryKey.toString());
	}

	/**
	 * Set value of SalesTerritoryKey
	 * @param salesterritorykey
	 */
	public final void setSalesTerritoryKey(Integer salesterritorykey)
	{
		setSalesTerritoryKey(getContext(), salesterritorykey);
	}

	/**
	 * Set value of SalesTerritoryKey
	 * @param context
	 * @param salesterritorykey
	 */
	public final void setSalesTerritoryKey(IContext context, Integer salesterritorykey)
	{
		getMendixObject().setValue(context, MemberNames.SalesTerritoryKey.toString(), salesterritorykey);
	}

	/**
	 * @return value of SalesTerritoryRegion
	 */
	public final String getSalesTerritoryRegion()
	{
		return getSalesTerritoryRegion(getContext());
	}

	/**
	 * @param context
	 * @return value of SalesTerritoryRegion
	 */
	public final String getSalesTerritoryRegion(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.SalesTerritoryRegion.toString());
	}

	/**
	 * Set value of SalesTerritoryRegion
	 * @param salesterritoryregion
	 */
	public final void setSalesTerritoryRegion(String salesterritoryregion)
	{
		setSalesTerritoryRegion(getContext(), salesterritoryregion);
	}

	/**
	 * Set value of SalesTerritoryRegion
	 * @param context
	 * @param salesterritoryregion
	 */
	public final void setSalesTerritoryRegion(IContext context, String salesterritoryregion)
	{
		getMendixObject().setValue(context, MemberNames.SalesTerritoryRegion.toString(), salesterritoryregion);
	}

	/**
	 * @return value of SalesTerritoryCountry
	 */
	public final String getSalesTerritoryCountry()
	{
		return getSalesTerritoryCountry(getContext());
	}

	/**
	 * @param context
	 * @return value of SalesTerritoryCountry
	 */
	public final String getSalesTerritoryCountry(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.SalesTerritoryCountry.toString());
	}

	/**
	 * Set value of SalesTerritoryCountry
	 * @param salesterritorycountry
	 */
	public final void setSalesTerritoryCountry(String salesterritorycountry)
	{
		setSalesTerritoryCountry(getContext(), salesterritorycountry);
	}

	/**
	 * Set value of SalesTerritoryCountry
	 * @param context
	 * @param salesterritorycountry
	 */
	public final void setSalesTerritoryCountry(IContext context, String salesterritorycountry)
	{
		getMendixObject().setValue(context, MemberNames.SalesTerritoryCountry.toString(), salesterritorycountry);
	}

	/**
	 * @return value of SalesTerritoryGroup
	 */
	public final String getSalesTerritoryGroup()
	{
		return getSalesTerritoryGroup(getContext());
	}

	/**
	 * @param context
	 * @return value of SalesTerritoryGroup
	 */
	public final String getSalesTerritoryGroup(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.SalesTerritoryGroup.toString());
	}

	/**
	 * Set value of SalesTerritoryGroup
	 * @param salesterritorygroup
	 */
	public final void setSalesTerritoryGroup(String salesterritorygroup)
	{
		setSalesTerritoryGroup(getContext(), salesterritorygroup);
	}

	/**
	 * Set value of SalesTerritoryGroup
	 * @param context
	 * @param salesterritorygroup
	 */
	public final void setSalesTerritoryGroup(IContext context, String salesterritorygroup)
	{
		getMendixObject().setValue(context, MemberNames.SalesTerritoryGroup.toString(), salesterritorygroup);
	}

	/**
	  * The contents of the binary field will be written to the output stream.
	  * The output stream will be closed at the end.
	  *
	  * @param context
	  * @param outputStream
	  */
	public final void getSalesTerritoryImage(IContext context, java.io.OutputStream outputStream)
	{
		MendixBinary binary = (MendixBinary) getMendixObject().getMember(context, MemberNames.SalesTerritoryImage.toString());
		binary.retrieveValue(context, outputStream);
	}

	/**
	  * Stores the bytes from the given InputStream.
	  *
	  * Please note that the input stream will be immediately sent to the data store,
	  * whether you commit the Mendix object or not.
	  *
	  * @param context
	  * @param inputStream
	  * @param length the number of bytes in the stream
	  */
	public final void setSalesTerritoryImage(IContext context, java.io.InputStream inputStream, long length)
	{
		if (getMendixObject().getState() == IMendixObject.ObjectState.INSTANTIATED)
			try { commit(); } catch (CoreException ex) { }
		MendixBinary binary = (MendixBinary) getMendixObject().getMember(context, MemberNames.SalesTerritoryImage.toString());
		binary.storeValue(context, inputStream, length);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return salesTerritoryMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final myfirstmodule.proxies.SalesTerritory that = (myfirstmodule.proxies.SalesTerritory) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "MyFirstModule.SalesTerritory";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().getGuid();
	}
}
